"""
Django settings for interior_bazzar project.

Generated by 'django-admin startproject' using Django 5.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
from app_ib.Utils.AppMode import APPMODE
from pathlib import Path
from datetime import timedelta
import os 
import environ
env = environ.Env()
environ.Env.read_env()

os.environ["DJANGO_ALLOW_ASYNC_UNSAFE"] = "true"

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-+v0qbypjz*^(5^!7@uosljz@9phfii&=13u3*)0oz802oulfzu'

# Set the environment
ENV =  APPMODE.DEV

print(f'ENV: {ENV}')
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
ALLOWED_HOSTS = []
AUTH_USER_MODEL = 'app_ib.CustomUser'

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'django_extensions',
    'django_quill',
    'app_ib',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'interior_bazzar.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'interior_bazzar.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.db.DatabaseCache",
        "LOCATION": "my_cache_table",
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ]
}


SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=60),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=90),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "UPDATE_LAST_LOGIN": False,

    "ALGORITHM": "HS256",
    # "SIGNING_KEY": settings.SECRET_KEY,
    "VERIFYING_KEY": "",
    "AUDIENCE": None,
    "ISSUER": None,
    "JSON_ENCODER": None,
    "JWK_URL": None,
    "LEEWAY": 0,

    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",

    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",

    "JTI_CLAIM": "jti",

    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),

    "TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainPairSerializer",
    "TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSerializer",
    "TOKEN_VERIFY_SERIALIZER": "rest_framework_simplejwt.serializers.TokenVerifySerializer",
    "TOKEN_BLACKLIST_SERIALIZER": "rest_framework_simplejwt.serializers.TokenBlacklistSerializer",
    "SLIDING_TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainSlidingSerializer",
    "SLIDING_TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSlidingSerializer",
}


if(ENV == APPMODE.DEV):
    print(f'Mode Activated [ DEV ]')
    DEBUG = True 
        
    # Razor Pay
    # RAZORPAY_KEY=env("PROD_RAZORPAY_KEY")
    # RAZORPAY_KEY_SECRET=env("PROD_RAZORPAY_KEY_SECRET")
    

    ALLOWED_HOSTS = ["*"]
    # CORS_ORIGIN_WHITELIST = [
    #     'https://lawcalldevapi.store',
    # ]
    # CORS_ALLOWED_ORIGIN_REGEXES = [
    #     r"^https://\w+\.lawcalldevapi\.store$",
    # ]
    
    CORS_ORIGIN_ALLOW_ALL = True

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': env('DATABASE_NAME'),
            'USER': env('DATABASE_USERNAME'),
            'PASSWORD': env('DATABASE_PASSWORD'),
            'HOST': env('DATABASE_HOST'),
            'PORT': env('DATABASE_PORT'),
        }
    }
    
    # S3
    AWS_ACCESS_KEY_ID = env('AWS_KEY')
    AWS_SECRET_ACCESS_KEY = env('AWS_SECRETE_KEY')
    AWS_STORAGE_BUCKET_NAME = env('S3_BUCKET_NAME')
    AWS_S3_REGION_NAME = env('S3_REGION')
    DEFAULT_FILE_STORAGE = "storages.backends.s3.S3Storage"
    STATICFILES_STORAGE = "storages.backends.s3.S3Storage"
    AWS_S3_FILE_OVERWRITE = True
    AWS_DEFAULT_ACL = None
    
    
if(ENV == APPMODE.PROD):
    print(f'Mode Activated [ PROD ]')    
    DEBUG = False 

    # Razor pay
    # RAZORPAY_KEY=env("PROD_RAZORPAY_KEY")
    # RAZORPAY_KEY_SECRET=env("PROD_RAZORPAY_KEY_SECRET")
    # AWS
    AWS_ACCESS_KEY_ID = env('AWS_KEY')
    AWS_SECRET_ACCESS_KEY = env('AWS_SECRETE_KEY')
        
    ALLOWED_HOSTS = ["*"]
    
    CORS_ORIGIN_ALLOW_ALL = True
    # CORS_ORIGIN_WHITELIST = [        
    #     'https://granthamapi.store',
    #     'https://grantham.org.in', 
    # ]
    
    # CORS_ALLOWED_ORIGIN_REGEXES = [
    # r"^https://\w+\.grantham\.org.in$",
    # r"^https://\w+\.granthamapi\.store$",
    # ]
    
    AWS_ACCESS_KEY_ID = env('AWS_KEY')
    AWS_SECRET_ACCESS_KEY = env('AWS_SECRETE_KEY')
    
    # DB
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': env('PROD_DATABASE_NAME'),
            'USER': env('PROD_DATABASE_USERNAME'),
            'PASSWORD': env('PROD_DATABASE_PASSWORD'),
            'HOST': env('PROD_DATABASE_HOST'),
            'PORT': env('PROD_DATABASE_PORT'),
        }
    }
    

    # S3:
    AWS_STORAGE_BUCKET_NAME = env('PROD_S3_BUCKET_NAME')
    AWS_S3_REGION_NAME = env('PROD_S3_REGION')
    DEFAULT_FILE_STORAGE = "storages.backends.s3.S3Storage"
    STATICFILES_STORAGE = "storages.backends.s3.S3Storage"
    AWS_S3_FILE_OVERWRITE = True
    AWS_DEFAULT_ACL = None

if(ENV == APPMODE.LOC):
    ALLOWED_HOSTS = ["*"]
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
    AWS_ACCESS_KEY_ID = env('AWS_KEY')
    AWS_SECRET_ACCESS_KEY = env('AWS_SECRETE_KEY')
    AWS_STORAGE_BUCKET_NAME = env('S3_BUCKET_NAME')
    AWS_S3_REGION_NAME = env('S3_REGION')
    DEFAULT_FILE_STORAGE = "storages.backends.s3.S3Storage"
    STATICFILES_STORAGE = "storages.backends.s3.S3Storage"
    AWS_S3_FILE_OVERWRITE = True
    AWS_DEFAULT_ACL = None

STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / 'static']
STATIC_ROOT = BASE_DIR  / 'static_root'

# Email Server

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = env('EMAIL_HOST')
EMAIL_HOST_USER = env('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD') # Use generated app password here
EMAIL_PORT = 587
EMAIL_USE_TLS = True
DEFAULT_FROM_EMAIL = env('DEFAULT_FROM_EMAIL')

    # Development:
    #  eb deploy dev-ib-env-1 --profile interior_bazzar_home
    # [domain]
    
    
    # Production
    # eb deploy prod-ib-env-1 --profile interior_bazzar_home
    # [domain]
    
    
    # python -m uvicorn interior_bazzar.asgi:application --port 8888 --host 0.0.0.0 
    # http://127.0.0.1:8888/api/test_api/

# async def say_after(delay, what):
#     await asyncio.sleep(delay)
#     print(what)


# @api_view(['GET'])
# async def NetworkCall(request):
#     async with httpx.AsyncClient() as client:
#         response = await client.get('https://www.example.com/')
#         print(response)


# @api_view(['GET'])
# async def BackgroundTask(request):
#     background_tasks = set()
#     for i in range(10):
#         task = asyncio.create_task(say_after(2,'df'))

#         # Add task to the set. This creates a strong reference.
#         background_tasks.add(task)

#         # To prevent keeping references to finished tasks forever,
#         # make each task remove its own reference from the set after
#         # completion:
#         task.add_done_callback(background_tasks.discard)
#     return Response({"result": 'background task'})


# @api_view(['GET'])
# async def TaskAysnc(request):
#     task2 = asyncio.create_task(
#         say_after(2, 'world'))
#     total = task2.result()
#     return Response({"result": total})

# @api_view(['GET'])
# def SyncFunction(request):
#     start_time = time.time()
#     total = time.time()-start_time
#     print(f'Total {total}')
#     return Response({"result": total})

# @api_view(['GET'])
# async def AsyncFunction(request):
#     start_time = time.time()
#     result = await asyncio.sleep(3)
#     total = time.time()-start_time
#     print(f'Total {total}')
#     return Response({"result": total})


# start_time = time.time()
# end_time = time.time()
# execution_time = end_time - start_time
# print(f"Execution time: {execution_time:.4f} seconds")